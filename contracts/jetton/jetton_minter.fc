#include "../imports/stdlib.fc";
#include "op_codes.fc";
#include "jetton_utils.fc";
#include "params.fc";
{-
    storage:
        total_supply
        admin_address
        content
        jetton_wallet_code
-}

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(),
        ds~load_msg_addr(),
        ds~load_ref(),
        ds~load_ref()
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) impure inline {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(content)
        .store_ref(jetton_wallet_code)
    .end_cell());
}

() mint_tokens(int amount, slice to_address, cell jetton_wallet_code, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; 过滤空消息
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    ;; 过滤所有的反弹消息
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr(); ;; 发送者地址
    ;; 操作码
    int op = in_msg_body~load_uint(32); 
    ;; query_id
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();

    ;; mint
    if (op == op::mint()) {
        ;; 检查消息发送者是否位管理员，如果不是管理员，抛出异常
        throw_unless(73, equal_slices(sender_address, admin_address));
        ;; mint地址
        slice to_address = in_msg_body~load_msg_addr();
        ;; 转账的ton的数量
        int amount = in_msg_body~load_coins();

        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        ;; 跳过op和query_id
        master_msg_cs~skip_bits(32 + 64);
        ;; mint代币的数量
        int jetton_amount = master_msg_cs~load_coins();
        mint_tokens(amount, to_address, jetton_wallet_code, master_msg);

        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code);
        return ();
    }

    ;; burn
    if (op = op::burn_notification()) {
        ;; 要销毁的代币的数量
        int jetton_amount = in_msg_body~load_coins();
        ;; 销毁代币的用户地址
        slice from_address = in_msg_body~load_msg_addr();

        throw_unless(74, equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address));
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code);

        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6)
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
	(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
	return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
	(int total_supply, slice admin_address, cell content, cell jetton_wallet_code) = load_data();
	return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}